{"componentChunkName":"component---src-templates-blog-post-js","path":"/js-for-loop/","result":{"data":{"site":{"siteMetadata":{"title":"Canhua's Blog"}},"markdownRemark":{"id":"3a9865fd-cc76-56c4-8eeb-311894e729af","excerpt":"For..In for in, iterates keys in an object and indexes in an array Do not use for in over an Array if the index order is important. The index order isâ€¦","html":"<h2>For..In</h2>\n<p>for in, iterates keys in an object and indexes in an array</p>\n<p>Do not use for in over an Array if the index order is important. The index order is implementation-dependent, and array values may not be accessed in the order you expect.</p>\n<pre><code class=\"language-js\">for (key in object) {\r\n  // code block to be executed\r\n}\r\n\r\nfor (index in array) {\r\n  code\r\n}\n</code></pre>\n<p>You may not get expect result when using it in Map and Set</p>\n<pre><code class=\"language-js\">let pets = new Set([\"Cat\", \"Dog\", \"Hamster\"]);\r\npets[\"species\"] = \"mammals\";\r\n\r\nfor (let pet in pets) {\r\n   console.log(pet); // \"species\"\r\n}\n</code></pre>\n<h2>For..Of</h2>\n<p>The JavaScript for of statement loops through the values of an iterable object.</p>\n<p>It lets you loop over iterable data structures such as Arrays, Strings, Maps, NodeLists, and more:</p>\n<pre><code class=\"language-js\">for (variable of iterable) {\r\n  // code block to be executed\r\n}\r\n\r\n\r\n// Array\r\nfor (const x of [\"BMW\", \"Volvo\", \"Mini\"]) console.log(x)\r\n\r\n// String\r\nfor (let x of \"language\") console.log(x)\r\n\r\n// Set\r\nconst letters = new Set([\"a\",\"b\",\"c\"]);\r\nfor (const x of letters.values())  console.log(x);\r\nfor (const x of letters.keys())  console.log(x);\r\nfor (const x of letters)  console.log(x);\r\nfor (let [key, value] of letters.entries()) console.log(key + \":\" + value);\r\n\r\n// Map\r\nvar map = new Map([[\"firstname\" ,\"Canhua\"], \r\n        [\"lastname\", \"Li\"], [\"website\", \"licanhua.github.io\"]]);\r\nfor (const x of map.values())  console.log(x);\r\nfor (const x of map.keys())  console.log(x);\r\nfor (const x of map)  console.log(x);\r\nfor (let [key, value] of map.entries()) console.log(key + \":\" + value);\r\n\n</code></pre>\n<h2>ForEach</h2>\n<p>JavaScript forEach() is related to the execution of a function on each element of an array which means that for each() method is exclusively related to the elements defined in an array. This can only be used on Maps, Arrays and sets which represents another fact that the elements should be arranged in a specific order to perform some activity.</p>\n<pre><code class=\"language-js\">// Ordered data structure(callback function() (present_value [,index[,data_structure]])[, thisArg])\r\narr.forEach(function(element, index, array) { /* ... */ }, thisArg)\r\nmap.forEach(function(value, key, map) { /* ... */ }, thisArg)\r\nset.forEach(function(value, key, set) { /* ... */ }, thisArg)\r\n\r\n// Map\r\nnew Map([['foo', 3], ['bar', {}], ['baz', undefined]]).forEach((value, key, map) => {\r\n  console.log(`m[${key}] = ${value}`);\r\n})\r\n// m[foo] = 3\r\n// m[bar] = [object Object]\r\n// m[baz] = undefined\r\n\r\n// Set\r\nnew Set(['foo', 'bar', undefined]).forEach((value1, value2, set) => {\r\n    console.log('s[' + value1 + '] = ' + value2);\r\n})\r\n// s[foo] = foo\r\n// s[bar] = bar\r\n// s[undefined] = undefined\r\n\r\n[\"a\",\"b\",\"c\"].forEach((element, index) => console.log(`arr[${index}] = ${element}`));\r\n// arr[0] = a\r\n// arr[1] = b\r\n// arr[2] = c\r\n\n</code></pre>","frontmatter":{"title":"JavaScript For..In/For..Of/ForEach Loops","date":"December 20, 2021","description":"JavaScript For..In/For..Of/ForEach Loops for Object, Array, Map, and Set"}},"previous":{"fields":{"slug":"/leetcode-2/"},"frontmatter":{"title":"LeetCode 2"}},"next":{"fields":{"slug":"/js-mistakes/"},"frontmatter":{"title":"JavaScript Common Mistakes"}}},"pageContext":{"id":"3a9865fd-cc76-56c4-8eeb-311894e729af","previousPostId":"6785c747-feb6-574c-a435-1b10a1b95020","nextPostId":"6fd486ab-370a-5d30-a77f-d622a4aeec57"}},"staticQueryHashes":["2841359383","3257411868"],"slicesMap":{}}