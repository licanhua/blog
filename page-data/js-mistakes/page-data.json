{"componentChunkName":"component---src-templates-blog-post-js","path":"/js-mistakes/","result":{"data":{"site":{"siteMetadata":{"title":"Canhua's Blog"}},"markdownRemark":{"id":"6fd486ab-370a-5d30-a77f-d622a4aeec57","excerpt":"Accidentally Using the Assignment Operator This if statement returns true (maybe not as expected), because 10 is true: Expecting Loose Comparison In regularâ€¦","html":"<h2>Accidentally Using the Assignment Operator</h2>\n<ul>\n<li>This if statement returns true (maybe not as expected), because 10 is true:</li>\n</ul>\n<pre><code class=\"language-js\">let x = 0;\r\nif (x = 10) {...}\r\n\r\nlet x = 0;\r\nif (x = 0) {...}\n</code></pre>\n<h2>Expecting Loose Comparison</h2>\n<p>In regular comparison, data type does not matter. This if statement returns true:</p>\n<pre><code class=\"language-js\">let x = 10;\r\nlet y = \"10\";\r\nif (x == y) // true\n</code></pre>\n<p>In strict comparison, data type does matter. This if statement returns false:</p>\n<pre><code class=\"language-js\">let x = 10;\r\nlet y = \"10\";\r\nif (x === y) // false\n</code></pre>\n<h2>switch statements use strict comparison</h2>\n<pre><code class=\"language-js\">let x = 10;\r\nswitch(x) {\r\n  case \"10\": alert(\"Hello\"); // no alert. should use case 10:\r\n}\n</code></pre>\n<h2>Confusing Addition &#x26; Concatenation</h2>\n<pre><code class=\"language-js\">let x = 10;\r\nx = 10 + 5;       // Now x is 15\r\n\r\nlet y = 10;\r\ny += \"5\";        // Now y is \"105\"\n</code></pre>\n<h2>Misunderstanding Floats</h2>\n<pre><code class=\"language-js\">let x = 0.1;\r\nlet y = 0.2;\r\nlet z = x + y            // the result in z will not be 0.3. but 0.30000000000000004\r\n\r\nlet z = (x * 10 + y * 10) / 10;       // z will be 0.3\n</code></pre>\n<h2>Undefined is Not Null</h2>\n<p>You can test if an object exists by testing if the type is undefined</p>\n<pre><code class=\"language-js\">if (typeof myObj === \"undefined\") \n</code></pre>\n<p>but it will throw exception if</p>\n<pre><code class=\"language-js\">if (myObj === null) \r\nif (myObj === undefined) \n</code></pre>\n<p>How to test a obj is not empty</p>\n<pre><code class=\"language-js\">if (typeof myObj !== \"undefined\" &#x26;&#x26; myObj !== null) \n</code></pre>\n<h2>type coercion</h2>\n<pre><code class=\"language-js\">let x = 'hello' &#x26;&#x26; 123;   // x === 123\r\n\n</code></pre>\n<h2>Incorrect references to this</h2>\n<pre><code class=\"language-js\">Game.prototype.restart = function () {\r\n  \r\n  var self = this;   // save reference to 'this', while it's still this!\r\n  this.timer = setTimeout(function(){\r\n    this.clearBoard();   // this doesn't work here.\r\n    self.clearBoard();    // oh OK, I do know who 'self' is!\r\n  }, 0);\r\n};\n</code></pre>\n<h2>NaN</h2>\n<pre><code class=\"language-js\">console.log(NaN == NaN);    // false\r\nconsole.log(NaN === NaN);   // false\r\nconsole.log(isNaN(NaN));    // true\n</code></pre>\n<h2>Incorrect use of function definitions inside for loops</h2>\n<pre><code class=\"language-js\">var elements = document.getElementsByTagName('input');\r\nvar n = elements.length;    // assume we have 10 elements for this example\r\nfor (var i = 0; i &#x3C; n; i++) {\r\n    elements[i].onclick = function() {\r\n        console.log(\"This is element #\" + i); // Actual Result: This is element #10\r\n    };\r\n}\n</code></pre>\n<p>Fix it with a function</p>\n<pre><code class=\"language-js\">var makeHandler = function(num) {  // outer function\r\n     return function() {   // inner function\r\n         console.log(\"This is element #\" + num);\r\n     };\r\n};\r\nfor (var i = 0; i &#x3C; n; i++) {\r\n    elements[i].onclick = makeHandler(i+1);\r\n}\r\n\n</code></pre>\n<h2>Reference</h2>\n<p><a href=\"https://www.w3schools.com/js/js_mistakes.asp\">https://www.w3schools.com/js/js_mistakes.asp</a></p>","frontmatter":{"title":"JavaScript Common Mistakes","date":"December 20, 2021","description":"JavaScript Common Mistakes"}},"previous":{"fields":{"slug":"/js-for-loop/"},"frontmatter":{"title":"JavaScript For..In/For..Of/ForEach Loops"}},"next":{"fields":{"slug":"/js-tips-2/"},"frontmatter":{"title":"JavaScript tips - 2"}}},"pageContext":{"id":"6fd486ab-370a-5d30-a77f-d622a4aeec57","previousPostId":"3a9865fd-cc76-56c4-8eeb-311894e729af","nextPostId":"fb7b1513-8953-54fc-abe0-47ae8199ca5e"}},"staticQueryHashes":["2841359383","3257411868"],"slicesMap":{}}