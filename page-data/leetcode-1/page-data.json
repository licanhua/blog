{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/leetcode-1/",
    "result": {"data":{"site":{"siteMetadata":{"title":"Canhua's Blog"}},"markdownRemark":{"id":"50378cdc-83c9-5f0c-85ed-ed8ed033ecc2","excerpt":"160. Intersection of Two Linked Lists 189. Rotate Array It’s the best example to use splice 148. Sort list fast and slow pointers let or var in function","html":"<p><a href=\"https://leetcode.com/problems/intersection-of-two-linked-lists/\">160. Intersection of Two Linked Lists</a></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"> <span class=\"token comment\">// Assume list A and list B, the intersection of A and B </span>\r\n <span class=\"token comment\">// should be the same as intersection of AB and BA</span>\r\n <span class=\"token comment\">// ...A ...B</span>\r\n <span class=\"token comment\">// ...B ...A</span>\r\n <span class=\"token keyword\">var</span> <span class=\"token function-variable function\">getIntersectionNode</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">headA<span class=\"token punctuation\">,</span> headB</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token keyword\">let</span> cur1 <span class=\"token operator\">=</span> headA<span class=\"token punctuation\">;</span>\r\n  <span class=\"token keyword\">let</span> cur2 <span class=\"token operator\">=</span> headB<span class=\"token punctuation\">;</span>\r\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>cur1 <span class=\"token operator\">!=</span> cur2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n      cur1 <span class=\"token operator\">=</span> cur1 <span class=\"token operator\">?</span> cur1<span class=\"token punctuation\">.</span>next <span class=\"token operator\">:</span> headB<span class=\"token punctuation\">;</span>\r\n      cur2 <span class=\"token operator\">=</span> cur2 <span class=\"token operator\">?</span> cur2<span class=\"token punctuation\">.</span>next <span class=\"token operator\">:</span> headA<span class=\"token punctuation\">;</span>\r\n  <span class=\"token punctuation\">}</span>\r\n  <span class=\"token keyword\">return</span> cur1<span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><a href=\"https://leetcode.com/problems/rotate-array/\">189. Rotate Array</a></p>\n<p>It’s the best example to use splice</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">/**\r\n * @param {number[]} nums\r\n * @param {number} k\r\n * @return {void} Do not return anything, modify nums in-place instead.\r\n */</span>\r\n<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">rotate</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">nums<span class=\"token punctuation\">,</span> k</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n    k <span class=\"token operator\">%=</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\r\n    nums<span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>nums<span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span>k<span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\r\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><a href=\"https://leetcode.com/problems/sort-list/\">148. Sort list</a></p>\n<ul>\n<li>fast and slow pointers</li>\n<li>let or var in function</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">sortList</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">head</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>head <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> head<span class=\"token punctuation\">.</span>next <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> head<span class=\"token punctuation\">;</span>\r\n    <span class=\"token keyword\">let</span> slow <span class=\"token operator\">=</span> head<span class=\"token punctuation\">,</span> fast <span class=\"token operator\">=</span> head<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\r\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>fast <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> fast<span class=\"token punctuation\">.</span>next <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n        slow <span class=\"token operator\">=</span> slow<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\r\n        fast <span class=\"token operator\">=</span> fast<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span>\r\n\r\n    <span class=\"token keyword\">let</span> mid <span class=\"token operator\">=</span> slow<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\r\n    slow<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token keyword\">let</span> l1 <span class=\"token operator\">=</span> <span class=\"token function\">sortList</span><span class=\"token punctuation\">(</span>head<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token keyword\">let</span> l2 <span class=\"token operator\">=</span> <span class=\"token function\">sortList</span><span class=\"token punctuation\">(</span>mid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token keyword\">let</span> dummy <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ListNode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token keyword\">let</span> cur <span class=\"token operator\">=</span> dummy<span class=\"token punctuation\">;</span>\r\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>l1 <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> l2 <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>l1<span class=\"token punctuation\">.</span>val <span class=\"token operator\">&lt;=</span> l2<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n            cur<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> l1<span class=\"token punctuation\">;</span>\r\n            l1 <span class=\"token operator\">=</span> l1<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\r\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\r\n            cur<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> l2<span class=\"token punctuation\">;</span>\r\n            l2 <span class=\"token operator\">=</span> l2<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\r\n        <span class=\"token punctuation\">}</span>\r\n        cur <span class=\"token operator\">=</span> cur<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span>\r\n    cur<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> l1 <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">?</span> l2 <span class=\"token operator\">:</span> l1<span class=\"token punctuation\">;</span>\r\n    <span class=\"token keyword\">return</span> dummy<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>","frontmatter":{"title":"LeetCode 1","date":"December 11, 2021","description":"Leetcode good example"}},"previous":{"fields":{"slug":"/js-data-structure/"},"frontmatter":{"title":"JavaScript Data Structures and Algorithm.pdf"}},"next":{"fields":{"slug":"/js-tips/"},"frontmatter":{"title":"JavaScript tips"}}},"pageContext":{"id":"50378cdc-83c9-5f0c-85ed-ed8ed033ecc2","previousPostId":"68e788eb-6a4a-550d-ba04-c075c14a0b38","nextPostId":"7c2d5d7d-5b08-51fb-92bf-5df7f56156af"}},
    "staticQueryHashes": ["2841359383","3257411868"]}