{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/js-tips/",
    "result": {"data":{"site":{"siteMetadata":{"title":"Canhua's Blog"}},"markdownRemark":{"id":"7c2d5d7d-5b08-51fb-92bf-5df7f56156af","excerpt":"array.sort() calling sort() by itself simply sorts the array in lexicographical (aka alphabetical) order sort reduce For reduce(function(previousValueâ€¦","html":"<h1>array.sort()</h1>\n<p>calling sort() by itself simply sorts the array in lexicographical (aka alphabetical) order</p>\n<p><img src=\"./sort.png\" alt=\"sort\"></p>\n<h1>reduce</h1>\n<p>For <code>reduce(function(previousValue, currentValue)...</code>, most of time, previousValue and currentValue are the same type. Actually previousValue can be list, object which is different from currentValue too.</p>\n<pre><code class=\"language-js\">// map + filter\r\n  entries() {\r\n    return this.hashMap.keys.reduce((acc, key) => {\r\n      if(key !== undefined) {\r\n        acc.push(key.content);\r\n      }\r\n      return acc\r\n    }, []);\r\n  }\r\n\r\n// Grouping objects by a property\r\nlet people = [\r\n  { name: 'Alice', age: 21 },\r\n  { name: 'Max', age: 20 },\r\n  { name: 'Jane', age: 20 }\r\n];\r\n\r\nfunction groupBy(objectArray, property) {\r\n  return objectArray.reduce(function (acc, obj) {\r\n    let key = obj[property]\r\n    if (!acc[key]) {\r\n      acc[key] = []\r\n    }\r\n    acc[key].push(obj)\r\n    return acc\r\n  }, {})\r\n}\n</code></pre>","frontmatter":{"title":"JavaScript tips","date":"December 12, 2021","description":"JavaScript tips"}},"previous":{"fields":{"slug":"/leetcode-1/"},"frontmatter":{"title":"LeetCode 1"}},"next":{"fields":{"slug":"/C++-Comparator/"},"frontmatter":{"title":"C++ priority_queue and comparator"}}},"pageContext":{"id":"7c2d5d7d-5b08-51fb-92bf-5df7f56156af","previousPostId":"50378cdc-83c9-5f0c-85ed-ed8ed033ecc2","nextPostId":"2e6c7526-6861-55f0-b2da-ac9c6c725474"}},
    "staticQueryHashes": ["2841359383","3257411868"]}