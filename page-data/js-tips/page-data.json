{"componentChunkName":"component---src-templates-blog-post-js","path":"/js-tips/","result":{"data":{"site":{"siteMetadata":{"title":"Canhua's Blog"}},"markdownRemark":{"id":"43e3c897-b3fa-5ffa-a019-183eb7fa2e2f","excerpt":"array.sort() calling sort() by itself simply sorts the array in lexicographical (aka alphabetical) order sort reduce For reduce(function(previousValueâ€¦","html":"<h1>array.sort()</h1>\n<p>calling sort() by itself simply sorts the array in lexicographical (aka alphabetical) order</p>\n<p><img src=\"./sort.png\" alt=\"sort\"></p>\n<h1>reduce</h1>\n<p>For <code>reduce(function(previousValue, currentValue)...</code>, most of time, previousValue and currentValue are the same type. Actually previousValue can be list, object which is different from currentValue too.</p>\n<pre><code class=\"language-js\">// map + filter\r\n  entries() {\r\n    return this.hashMap.keys.reduce((acc, key) => {\r\n      if(key !== undefined) {\r\n        acc.push(key.content);\r\n      }\r\n      return acc\r\n    }, []);\r\n  }\r\n\r\n// Grouping objects by a property\r\nlet people = [\r\n  { name: 'Alice', age: 21 },\r\n  { name: 'Max', age: 20 },\r\n  { name: 'Jane', age: 20 }\r\n];\r\n\r\nfunction groupBy(objectArray, property) {\r\n  return objectArray.reduce(function (acc, obj) {\r\n    let key = obj[property]\r\n    if (!acc[key]) {\r\n      acc[key] = []\r\n    }\r\n    acc[key].push(obj)\r\n    return acc\r\n  }, {})\r\n}\n</code></pre>","frontmatter":{"title":"JavaScript tips","date":"December 12, 2021","description":"JavaScript tips"}},"previous":{"fields":{"slug":"/leetcode-1/"},"frontmatter":{"title":"LeetCode 1"}},"next":{"fields":{"slug":"/C++-Comparator/"},"frontmatter":{"title":"C++ priority_queue and comparator"}}},"pageContext":{"id":"43e3c897-b3fa-5ffa-a019-183eb7fa2e2f","previousPostId":"7be56a5d-8752-5226-b798-293d37a2c385","nextPostId":"9db42b0f-6473-577b-9a59-6a8d8f3a6d94"}},"staticQueryHashes":["2841359383","3257411868"],"slicesMap":{}}