{"componentChunkName":"component---src-templates-blog-post-js","path":"/C++-Comparator/","result":{"data":{"site":{"siteMetadata":{"title":"Canhua's Blog"}},"markdownRemark":{"id":"9db42b0f-6473-577b-9a59-6a8d8f3a6d94","excerpt":"std::greater or less use function using lambda to compare struct","html":"<h2>std::greater or less</h2>\n<pre><code class=\"language-c++\">priority_queue&#x3C;int,vector&#x3C;int>,greater&#x3C;int>> pq;\n</code></pre>\n<h2>use function</h2>\n<pre><code class=\"language-c++\">bool compare(ListNode* a, ListNode* b)\r\n{\r\n   return (a->val > b->val);\r\n}\r\n\r\npriority_queue&#x3C;ListNode*, vector&#x3C;ListNode*>, decltype(&#x26;compare)> q(compare);\r\n\n</code></pre>\n<h2>using lambda to compare</h2>\n<pre><code class=\"language-c++\">    auto compare = [](int lhs, int rhs)\r\n                {\r\n                    return lhs &#x3C; rhs;\r\n                };\r\n\r\n    std::priority_queue&#x3C;int, std::vector&#x3C;int>, decltype(compare)> q(compare);\r\n\n</code></pre>\n<h2>struct</h2>\n<pre><code class=\"language-c++\">struct Compare\r\n{\r\n    bool operator()(const int&#x26; lhs, const int&#x26; rhs)\r\n    {\r\n        return lhs &#x3C; rhs;\r\n    }\r\n};\r\npriority_queue&#x3C;int,vector&#x3C;int>, Compare > pq;\n</code></pre>","frontmatter":{"title":"C++ priority_queue and comparator","date":"December 15, 2021","description":"C++ Comparator for priority_queue"}},"previous":{"fields":{"slug":"/js-tips/"},"frontmatter":{"title":"JavaScript tips"}},"next":{"fields":{"slug":"/leetcode-2/"},"frontmatter":{"title":"LeetCode 2"}}},"pageContext":{"id":"9db42b0f-6473-577b-9a59-6a8d8f3a6d94","previousPostId":"43e3c897-b3fa-5ffa-a019-183eb7fa2e2f","nextPostId":"6785c747-feb6-574c-a435-1b10a1b95020"}},"staticQueryHashes":["2841359383","3257411868"],"slicesMap":{}}